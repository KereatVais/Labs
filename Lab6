â„–1

client.c

#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <pthread.h>

#include <errno.h>
#include <getopt.h>
#include <netdb.h>
#include <netinet/in.h>
#include <netinet/ip.h>
#include <sys/socket.h>
#include <sys/types.h>


struct Server {
  char ip[255];
  int port;
};

struct ThreadArgs{
    struct Server server_args;
    int begin;
    int end;
    int mod;
};

int result = 1;
pthread_mutex_t mut = PTHREAD_MUTEX_INITIALIZER;

uint64_t MultModulo(uint64_t a, uint64_t b, uint64_t mod) {
  uint64_t result = 0;
  a = a % mod;
  while (b > 0) {
    if (b % 2 == 1)
      result = (result + a) % mod;
    a = (a * 2) % mod;
    b /= 2;
  }

  return result % mod;
}

bool ConvertStringToUI64(const char *str, uint64_t *val) {
  char *end = NULL;
  unsigned long long i = strtoull(str, &end, 10);
  if (errno == ERANGE) {
    fprintf(stderr, "Out of uint64_t range: %s\n", str);
    return false;
  }

  if (errno != 0)
    return false;

  *val = i;
  return true;
}

void ThreadServer(void *args) {
  struct ThreadArgs *thread_args = (struct ThreadArgs *)args;
  // TODO: work continiously, rewrite to make parallel
    struct hostent *hostname = gethostbyname((*thread_args).server_args.ip);
    if (hostname == NULL) {
        fprintf(stderr, "gethostbyname failed with %s\n", (*thread_args).server_args.ip);
        exit(1);
    }

    struct sockaddr_in server;
    server.sin_family = AF_INET;
    server.sin_port = htons((*thread_args).server_args.port);
    server.sin_addr.s_addr = *((unsigned long *)hostname->h_addr);

    int sck = socket(AF_INET, SOCK_STREAM, 0);
    if (sck < 0) {
        fprintf(stderr, "Socket creation failed!\n");
        exit(1);
    }

    printf("connecting to : ip %s , port %d\n", (*thread_args).server_args.ip, (*thread_args).server_args.port);
    if (connect(sck, (struct sockaddr *)&server, sizeof(server)) < 0) {
        fprintf(stderr, "Connection failed\n");
        fprintf(stderr, "error creating connection: %s ", strerror(errno));
        exit(1);
    }

    uint64_t begin = (*thread_args).begin;
    uint64_t end = (*thread_args).end;
    uint64_t mod = (*thread_args).mod;
    printf("sending task to server: begin %llu, end %llu, mod %llu\n", begin, end, mod);

    char task[sizeof(uint64_t) * 3];
    memcpy(task, &begin, sizeof(uint64_t));
    memcpy(task + sizeof(uint64_t), &end, sizeof(uint64_t));
    memcpy(task + 2 * sizeof(uint64_t), &mod, sizeof(uint64_t));

    if (send(sck, task, sizeof(task), 0) < 0) {
      fprintf(stderr, "Send failed\n");
      exit(1);
    }

    char response[sizeof(uint64_t)];
    if (recv(sck, response, sizeof(response), 0) < 0) {
      fprintf(stderr, "Recieve failed\n");
      exit(1);
    }

    uint64_t answer;
    memcpy(&answer, response, sizeof(uint64_t));
    printf("recieved an answer: %llu\n", answer);
    pthread_mutex_lock(&mut);
    int temp = result;
    result = (temp * answer) % mod;
    pthread_mutex_unlock(&mut);
    close(sck);
}

int main(int argc, char **argv) {
  uint64_t k = -1;
  uint64_t mod = -1;
  char servers[255] = {'\0'}; // TODO: explain why 255

  while (true) {
    int current_optind = optind ? optind : 1;

    static struct option options[] = {{"k", required_argument, 0, 0},
                                      {"mod", required_argument, 0, 0},
                                      {"servers", required_argument, 0, 0},
                                      {0, 0, 0, 0}};

    int option_index = 0;
    int c = getopt_long(argc, argv, "", options, &option_index);

    if (c == -1)
      break;

    switch (c) {
    case 0: {
      switch (option_index) {
      case 0:
        ConvertStringToUI64(optarg, &k);
        if (k < 0)
            printf("k has to be greater than zero!");
        break;
        break;
      case 1:
        ConvertStringToUI64(optarg, &mod);
        if (mod < 0)
            printf("mod has to be greater than zero!");
        break;
        break;
      case 2:
        if (sizeof(servers) == 0)
            printf("Servers can't be null!");
        break;
        memcpy(servers, optarg, strlen(optarg));
        break;
      default:
        printf("Index %d is out of options\n", option_index);
      }
    } break;

    case '?':
      printf("Arguments error\n");
      break;
    default:
      fprintf(stderr, "getopt returned character code 0%o?\n", c);
    }
  }

  if (k == -1 || mod == -1 || !strlen(servers)) {
    fprintf(stderr, "Using: %s --k 1000 --mod 5 --servers /path/to/file\n",
            argv[0]);
    return 1;
  }

  // TODO: for one server here, rewrite with servers from file
  FILE* server_file = fopen(servers, "r");
  if (server_file == NULL) {
      perror( "cannot read server_file" );
      return 1;
  }


  char str[50];
  int servers_num = 0;
   while (1)
   {
      fgets(str,sizeof(str),server_file);

      if (feof(server_file) != 0)
      {
        break;
      }
      servers_num++;
   }
   
   char ips[servers_num][50];
   char ports[servers_num][50];
   struct Server *to = malloc(sizeof(struct Server) * servers_num);
   fseek(server_file, 0, SEEK_SET);

   int i=0;
   while (1)
   {
      fgets(str, sizeof(str), server_file);

      if (feof(server_file) != 0)
      {
        break;
      }
      strcpy((*(to + i)).ip, strtok(str , ":"));
      (*(to + i)).port = atoi(strtok(NULL, ":"));
      i++;
   }
   fclose(server_file);

   for (int i = 0; i < servers_num; i++){
       printf("ip: %s / port: %d\n", (*(to + i)).ip, (*(to + i)).port);
   } 

   sleep(1);
   pthread_t threads[servers_num];
   struct ThreadArgs args[servers_num]; 
   for (i = 0; i < servers_num; i++){
      args[i].server_args = *(to + i);
      args[i].begin = (k / servers_num) * i + 1;
      args[i].end = (k / servers_num) * (i+1);
      args[i].mod = mod;
      if (pthread_create(&threads[i], NULL, (void *)ThreadServer, (void *)(args + i))) {
      printf("Error: pthread_create failed!\n");
      return 1;
      }
   }

   
   for (int i = 0; i < servers_num; i++) {
    pthread_join(threads[i], NULL);
  }

  printf("\nResult: %d\n", result);

  free(to);
  return 0;
}

server.c
#include <limits.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include <getopt.h>
#include <netinet/in.h>
#include <netinet/ip.h>
#include <sys/socket.h>
#include <sys/types.h>

#include "pthread.h"

struct FactorialArgs {
  uint64_t begin;
  uint64_t end;
  uint64_t mod;
};

uint64_t MultModulo(uint64_t a, uint64_t b, uint64_t mod) {
  uint64_t result = 0;
  a = a % mod;
  while (b > 0) {
    if (b % 2 == 1)
      result = (result + a) % mod;
    a = (a * 2) % mod;
    b /= 2;
  }

  return result % mod;
}

uint64_t Factorial(const struct FactorialArgs *args) {
  uint64_t ans = 1;
  //printf("begin = %d, end = %d\n", (*args).begin, (*args).end);
  for (uint64_t i = (*args).begin; i < (*args).end; i++){
      ans*=i;
      //ans %= (*args).mod;
      printf("ans: %d\n", ans);
  } 

  return ans;
}

void *ThreadFactorial(void *args) {
  struct FactorialArgs *fargs = (struct FactorialArgs *)args;
  //printf("factorial: %d\n", Factorial(fargs));
  return (void *)(uint64_t *)Factorial(fargs);
}

int main(int argc, char **argv) {
  int tnum = -1;
  int port = -1;

  while (true) {
    int current_optind = optind ? optind : 1;

    static struct option options[] = {{"port", required_argument, 0, 0},
                                      {"tnum", required_argument, 0, 0},
                                      {0, 0, 0, 0}};

    int option_index = 0;
    int c = getopt_long(argc, argv, "", options, &option_index);

    if (c == -1)
      break;

    switch (c) {
    case 0: {
      switch (option_index) {
      case 0:
        port = atoi(optarg);
        if (port < 0)
            printf("Port has to be greater than zero!");
        break;
      case 1:
        tnum = atoi(optarg);
        if (tnum < 0)
            printf("Tnum has to be greater than zero!");
        break;
      default:
        printf("Index %d is out of options\n", option_index);
      }
    } break;

    case '?':
      printf("Unknown argument\n");
      break;
    default:
      fprintf(stderr, "getopt returned character code 0%o?\n", c);
    }
  }

  if (port == -1 || tnum == -1) {
    fprintf(stderr, "Using: %s --port 20001 --tnum 4\n", argv[0]);
    return 1;
  }

  int server_fd = socket(AF_INET, SOCK_STREAM, 0);
  if (server_fd < 0) {
    fprintf(stderr, "Can not create server socket!");
    return 1;
  }

  struct sockaddr_in server;
  server.sin_family = AF_INET;
  server.sin_port = htons((uint16_t)port);
  server.sin_addr.s_addr = htonl(INADDR_ANY);

  int opt_val = 1;
  setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR, &opt_val, sizeof(opt_val));

  int err = bind(server_fd, (struct sockaddr *)&server, sizeof(server));
  if (err < 0) {
    fprintf(stderr, "Can not bind to socket!");
    return 1;
  }

  err = listen(server_fd, 128);
  if (err < 0) {
    fprintf(stderr, "Could not listen on socket\n");
    return 1;
  }

  printf("Server listening at %d\n", port);

  while (true) {
    struct sockaddr_in client;
    socklen_t client_len = sizeof(client);
    int client_fd = accept(server_fd, (struct sockaddr *)&client, &client_len);

    if (client_fd < 0) {
      fprintf(stderr, "Could not establish new connection\n");
      continue;
    }

    while (true) {
      unsigned int buffer_size = sizeof(uint64_t) * 3;
      char from_client[buffer_size];
      int read = recv(client_fd, from_client, buffer_size, 0);

      if (!read)
        break;
      if (read < 0) {
        fprintf(stderr, "Client read failed\n");
        break;
      }
      if (read < buffer_size) {
        fprintf(stderr, "Client send wrong data format\n");
        break;
      }

      pthread_t threads[tnum];

      uint64_t begin = 0;
      uint64_t end = 0;
      uint64_t mod = 0;
      memcpy(&begin, from_client, sizeof(uint64_t));
      memcpy(&end, from_client + sizeof(uint64_t), sizeof(uint64_t));
      memcpy(&mod, from_client + 2 * sizeof(uint64_t), sizeof(uint64_t));

      fprintf(stdout, "Receive: %llu %llu %llu\n", begin, end, mod);

      struct FactorialArgs args[tnum];
      for (uint32_t i = 0; i < tnum; i++) {
        args[i].begin = begin + (end - begin + 1) / tnum * i;
        args[i].end = (i == tnum - 1) ? end + 1 : begin + (end - begin + 1) / tnum * (i + 1);
        args[i].mod = mod;
        printf("begin = %d, end = %d\n", (args[i].begin, args[i].end);
        if (pthread_create(&threads[i], NULL, ThreadFactorial,
                           (void *)&args[i])) {
          printf("Error: pthread_create failed!\n");
          return 1;
        }
      }

      uint64_t total = 1;
      for (uint32_t i = 0; i < tnum; i++) {
        uint64_t result = 1;
        pthread_join(threads[i], (void **)&result);
        printf("result: %d\n",result);
        total = MultModulo(total, result, mod);
        printf("total: %d\n", total);
      }

      printf("Total: %llu\n", total);

      char buffer[sizeof(total)];
      memcpy(buffer, &total, sizeof(total));
      err = send(client_fd, buffer, sizeof(total), 0);
      if (err < 0) {
        fprintf(stderr, "Can't send data to client\n");
        break;
      }
    }

    shutdown(client_fd, SHUT_RDWR);
    close(client_fd);
  }

  return 0;
}

servers.txt

127.0.0.1:20001
127.0.0.1:20002
